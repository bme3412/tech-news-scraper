{
    "source": "VentureBeat",
    "category": "technology",
    "region": "north_america",
    "url": "https://venturebeat.com/data-infrastructure/providing-consistent-reliable-customer-experiences-with-cqrs-at-scale/",
    "title": "Providing consistent, reliable customer experiences with CQRS at scale",
    "author": "Amit Meshram, Chase",
    "description": "To maintain seamless customer experiences, Chase explains their transition to a modern, always-on ecosystem that scales with customer demand.",
    "content": "Presented by JPMorganChase As more Chase card customers embrace digital services, we’ve seen a surge in transaction-related inquiries. This increase has put pressure on our distributed backend systems to maintain seamless customer experiences, even during system outages at Systems of Record (SORs) or other layers. To address these challenges, we embarked on a modernization journey. Our goal was to transition from siloed environments to a modern, always-on ecosystem that scales with customer demand. This transformation allows customers to manage accounts, conduct transactions and access financial services through our online and mobile platforms without friction. The result? A significant technological advancement in distributed systems and big data, supporting Chase’s journey to unlock and accelerate new value for our business and customers. SORs which were predominantly mainframe-based and eventually evolved to modern technology stacks were designed to ensure reliability of command traffic. Data was ingested into data warehouses, the primary destination for most queries. With the emergence of real-time traffic through digital experiences, SORs began exposing their data to queries through APIs. Over time, the volume of query traffic grew significantly, often surpassing command traffic. Nowadays, it’s not uncommon for queries to constitute up to 90% of total SOR read volume. These strategic shifts have had profound effects on the cost, scalability and reliability of SORs, often contributing to operational issues. In our quest to mitigate operational issues posed by SORs and provide exceptional customer experiences, Chase adopted Command Query Responsibility Segregation (CQRS), a software architectural pattern that separates the responsibilities of handling commands (write operations) and queries (read operations) into distinct parts. Introduced by Greg Young around 2010, CQRS has gained significant traction in the software development community due to its ability to enhance scalability, performance and maintainability in complex systems. At Chase we built and implemented standards to achieve business continuity three to five times faster and improved customer experience, speed to market with new experiences and reliability. These standards include: The read layer in the CQRS pattern played a pivotal role in building a common data product by providing a unified and optimized view of data tailored to various user needs. By decoupling the read operations from the write processes, it allowed for the creation of specialized read models that can aggregate and present data from multiple sources, enabling consistent and efficient access to data across different applications and services. Embracing the challenge of adopting CQRS was immensely gratifying, and we successfully accomplished the following objectives on our journey: While CQRS offers numerous benefits it also introduces additional complexity, especially in terms of system design, implementation and operational overhead. We spent significant time carefully evaluating trade-offs, considering key factors such as eventual consistency, asynchronous communication and aligning with the principles of domain-driven design (DDD). Adopting CQRS has allowed us to operate at scale and with autonomy. It requires careful consideration of trade-offs and may not suit every project or team. As with any architectural pattern, understanding the principles and applying them judiciously is key to realizing the benefits of CQRS in software development. Like what you’re reading? about the Chase Product, Experience and Technology teams on Next at Chase. Amit Meshram is Executive Director, Principal Software Engineer at Chase. ",
    "date": "March 25, 2025 6:50 AM",
    "content_length": 3720,
    "scraped_at": "2025-03-26T23:16:08.758005"
}